Project Structure:-
    manifest.json --> used for when opened in mobile phone



React creates it own virtual dom
which is ReactDom --> which has a function createRoot

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

it provide the functionality of creating our own tags ex <App/>

without React.StrictMode we can render our app 

we never included the script file in the index.html then how the index.js file can take the document.getElementById property ?

--> react-scripts in the package.json this adds automatically <script defer="" src="/static/js/bundle.js"></script>


but Vite don't use the react-scripts then how it connects the js 
--> it directly loaded in the index.html

vite is light weight as it does not load many js libraries


.. Since vite is a strict in it's syntax we can't we want to create a component we must give the extension as .jsx otherwise it can't be rendered and must use the uppercase for the first name


return statement can only send one element that's why we use <></>


.. the normal react without vite making a component always use capitalize function names other wise in normal also we cant use small letters

.. best practice for keeping file name is in capitalize format




// creating own react
 -> react tries to make a tree of the tags

// injecting variables in jsx
{}

{username} is evaluation expression only final evaluation can be printed 



//// Hooks

why we need hooks ?

react always react wherever the variable is changed and focuses on the UI updation based on the variables change everywhere in the UI

if suppose i have a value and i have to update in many places in the UI if i use the basic of js then i need to use document of each places
in the document which is very clumsy and hard to handle 

react gives a functionality of hooks which are used to change all the Ui points where the value of that variable is used whithout being clumsy


example of hooks 
  -> useState --> responsible for propagating the values to the user interface 

      ex and syntax 
        const  [variable, function]  = useState(default value)
        const [counter, setcounter] = useState(5)
  -> useEffect
  -> useParams
  -> useLoaderData
  ->useCallback



// virtual Dom , fibre and reconcillation

we trace the dom and change only the values that has been changed but the real dom rewrites the whole dom 


https://github.com/acdlite/react-fiber-architecture


// tailwind and props


props 



Starting of learning through projects


1)  bg changer
    -> onclick uses always refrence so we can't pass parameters so we can use callback function

2) password generator 
    -> useCallback hook is used to rerender it takes two arguments one is function and second one is dependency array
    -> useEffect hook it uses callBack (()=>{},[dependency on which the effect will occur])

3) Currency converter 
    -> custom hooks
    -> re usable components 
    -> useId
4) ReactRouter - website
    using loader functionality in react  router dom in a link when the mouse cursor is being navigated on the top of that button before clicking the button loader starts fetching the data and stores it in the cache


5) context api 

06) theme switcher

07) context api todo app with local storage

